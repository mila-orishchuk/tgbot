
import os
import telebot
from telebot import types
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('TOKEN')

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup_inline = types.InlineKeyboardMarkup()
    item_menu = types.InlineKeyboardButton(
        text='–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å', callback_data='menu')
    item_ingredients = types.InlineKeyboardButton(
        text='–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data='ingredients')
    markup_inline.add(item_menu, item_ingredients)
    bot.send_message(
        message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.from_user.first_name}.\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∏–º–µ—é—â–∏—Ö—Å—è –≤ –≤–∞—à–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", reply_markup=markup_inline)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "menu":
        markup_inline = types.InlineKeyboardMarkup()
        item_breakfast = types.InlineKeyboardButton(
            text='–ó–∞–≤—Ç—Ä–∞–∫', callback_data='breakfast')
        item_lunch = types.InlineKeyboardButton(
            text='–û–±–µ–¥', callback_data='lunch')
        item_snack = types.InlineKeyboardButton(
            text='–ü–µ—Ä–µ–∫—É—Å', callback_data='snack')
        item_dinner = types.InlineKeyboardButton(
            text='–£–∂–∏–Ω', callback_data='dinner')
        markup_inline.add(item_breakfast, item_lunch, item_snack, item_dinner)
        bot.send_message(
            call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=markup_inline)
    elif call.data == "ingredients":
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_meat = types.KeyboardButton('–ú—è—Å–æ, –ø—Ç–∏—Ü–∞, —è–π—Ü–∞')
        item_fish = types.KeyboardButton('–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã')
        item_vegetables = types.KeyboardButton('–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å')
        item_fruits = types.KeyboardButton('–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã')
        item_milk = types.KeyboardButton('–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
        item_cereal = types.KeyboardButton('–ö—Ä—É–ø—ã, –±–æ–±–æ–≤—ã–µ')
        item_pastry = types.KeyboardButton('–ò–∑ —Ç–µ—Å—Ç–∞')
        markup_reply.add(item_meat, item_fish, item_vegetables,
                         item_fruits, item_milk, item_cereal, item_pastry)
        bot.send_message(
            call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ: ', reply_markup=markup_reply)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "breakfast":
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                                  reply_markup=None)

    except Exception as err:
        print(err)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    print('work')

    if message.text == '–ó–∞–≤—Ç—Ä–∞–∫':
        bot.send_message(message.chat.id, f'')
    elif message.text == '–û–±–µ–¥':
        pass


def main():
    bot.polling(none_stop=True)


if __name__ == "__main__":
    main()